'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.239
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="ExxonSurveyMaster")>  _
Partial Public Class L2S_CustomerSurveyMasterDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertSurveyMaster(instance As SurveyMaster)
    End Sub
  Partial Private Sub UpdateSurveyMaster(instance As SurveyMaster)
    End Sub
  Partial Private Sub DeleteSurveyMaster(instance As SurveyMaster)
    End Sub
  Partial Private Sub InsertSurveyDataStore(instance As SurveyDataStore)
    End Sub
  Partial Private Sub UpdateSurveyDataStore(instance As SurveyDataStore)
    End Sub
  Partial Private Sub DeleteSurveyDataStore(instance As SurveyDataStore)
    End Sub
  Partial Private Sub InsertPrivilege(instance As Privilege)
    End Sub
  Partial Private Sub UpdatePrivilege(instance As Privilege)
    End Sub
  Partial Private Sub DeletePrivilege(instance As Privilege)
    End Sub
  Partial Private Sub InsertComputerInfo(instance As ComputerInfo)
    End Sub
  Partial Private Sub UpdateComputerInfo(instance As ComputerInfo)
    End Sub
  Partial Private Sub DeleteComputerInfo(instance As ComputerInfo)
    End Sub
  Partial Private Sub InsertImagesStore(instance As ImagesStore)
    End Sub
  Partial Private Sub UpdateImagesStore(instance As ImagesStore)
    End Sub
  Partial Private Sub DeleteImagesStore(instance As ImagesStore)
    End Sub
  Partial Private Sub InsertLoginSurveyPrivilege(instance As LoginSurveyPrivilege)
    End Sub
  Partial Private Sub UpdateLoginSurveyPrivilege(instance As LoginSurveyPrivilege)
    End Sub
  Partial Private Sub DeleteLoginSurveyPrivilege(instance As LoginSurveyPrivilege)
    End Sub
  Partial Private Sub InsertLoginInfo(instance As LoginInfo)
    End Sub
  Partial Private Sub UpdateLoginInfo(instance As LoginInfo)
    End Sub
  Partial Private Sub DeleteLoginInfo(instance As LoginInfo)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.CustomerDBSvc.My.MySettings.Default.ExxonSurveyMasterConnectionString2, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property SurveyMasters() As System.Data.Linq.Table(Of SurveyMaster)
		Get
			Return Me.GetTable(Of SurveyMaster)
		End Get
	End Property
	
	Public ReadOnly Property SurveyDataStores() As System.Data.Linq.Table(Of SurveyDataStore)
		Get
			Return Me.GetTable(Of SurveyDataStore)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property Privileges() As System.Data.Linq.Table(Of Privilege)
		Get
			Return Me.GetTable(Of Privilege)
		End Get
	End Property
	
	Public ReadOnly Property ComputerInfos() As System.Data.Linq.Table(Of ComputerInfo)
		Get
			Return Me.GetTable(Of ComputerInfo)
		End Get
	End Property
	
	Public ReadOnly Property ImagesStores() As System.Data.Linq.Table(Of ImagesStore)
		Get
			Return Me.GetTable(Of ImagesStore)
		End Get
	End Property
	
	Public ReadOnly Property LoginSurveyPrivileges() As System.Data.Linq.Table(Of LoginSurveyPrivilege)
		Get
			Return Me.GetTable(Of LoginSurveyPrivilege)
		End Get
	End Property
	
	Public ReadOnly Property LoginInfos() As System.Data.Linq.Table(Of LoginInfo)
		Get
			Return Me.GetTable(Of LoginInfo)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.proc_GetSurveyIDsAndPrivilegeIDsByLoginID")>  _
	Public Function proc_GetSurveyIDsAndPrivilegeIDsByLoginID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoginID", DbType:="Int")> ByVal loginID As System.Nullable(Of Integer)) As ISingleResult(Of proc_GetSurveyIDsAndPrivilegeIDsByLoginIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loginID)
		Return CType(result.ReturnValue,ISingleResult(Of proc_GetSurveyIDsAndPrivilegeIDsByLoginIDResult))
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SurveyMaster")>  _
Partial Public Class SurveyMaster
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyID As Integer
	
	Private _SurveyDescription As String
	
	Private _QueueURI As String
	
	Private _QueueName As String
	
	Private _QueueComputer As String
	
	Private _SurveyDataStoreID As Integer
	
	Private _SurveyDataStoreComputer As String
	
	Private _LoginID As Integer
	
	Private _CreatedDate As System.Nullable(Of Date)
	
	Private _LastModifiedDate As System.Nullable(Of Date)
	
	Private _FirstRespondentPostedDate As System.Nullable(Of Date)
	
	Private _LastRespondentPostedDate As System.Nullable(Of Date)
	
	Private _RespondenStartedtCount As Integer
	
	Private _RespondentCompletedCount As Integer
	
	Private _LastRespondentStartedDate As System.Nullable(Of Date)
	
	Private _LastRespondentCompletedDate As System.Nullable(Of Date)
	
	Private _ActiveRespondentsCount As Integer
	
	Private _FirstPublishedDate As System.Nullable(Of Date)
	
	Private _LastPublishedDate As System.Nullable(Of Date)
	
	Private _SurveyType As Integer
	
	Private _ResponsePostingSvcIsActive As Boolean
	
	Private _StatisticsViewerSvcIsActive As Boolean
	
	Private _FirstStatisticsViewerDate As System.Nullable(Of Date)
	
	Private _LastStatisticsViewerDate As System.Nullable(Of Date)
	
	Private _SurveyStateID As Integer
	
	Private _Model As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnSurveyDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnSurveyDescriptionChanged()
    End Sub
    Partial Private Sub OnQueueURIChanging(value As String)
    End Sub
    Partial Private Sub OnQueueURIChanged()
    End Sub
    Partial Private Sub OnQueueNameChanging(value As String)
    End Sub
    Partial Private Sub OnQueueNameChanged()
    End Sub
    Partial Private Sub OnQueueComputerChanging(value As String)
    End Sub
    Partial Private Sub OnQueueComputerChanged()
    End Sub
    Partial Private Sub OnSurveyDataStoreIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyDataStoreIDChanged()
    End Sub
    Partial Private Sub OnSurveyDataStoreComputerChanging(value As String)
    End Sub
    Partial Private Sub OnSurveyDataStoreComputerChanged()
    End Sub
    Partial Private Sub OnLoginIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLoginIDChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnLastModifiedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastModifiedDateChanged()
    End Sub
    Partial Private Sub OnFirstRespondentPostedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFirstRespondentPostedDateChanged()
    End Sub
    Partial Private Sub OnLastRespondentPostedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastRespondentPostedDateChanged()
    End Sub
    Partial Private Sub OnRespondenStartedtCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnRespondenStartedtCountChanged()
    End Sub
    Partial Private Sub OnRespondentCompletedCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnRespondentCompletedCountChanged()
    End Sub
    Partial Private Sub OnLastRespondentStartedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastRespondentStartedDateChanged()
    End Sub
    Partial Private Sub OnLastRespondentCompletedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastRespondentCompletedDateChanged()
    End Sub
    Partial Private Sub OnActiveRespondentsCountChanging(value As Integer)
    End Sub
    Partial Private Sub OnActiveRespondentsCountChanged()
    End Sub
    Partial Private Sub OnFirstPublishedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFirstPublishedDateChanged()
    End Sub
    Partial Private Sub OnLastPublishedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastPublishedDateChanged()
    End Sub
    Partial Private Sub OnSurveyTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyTypeChanged()
    End Sub
    Partial Private Sub OnResponsePostingSvcIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnResponsePostingSvcIsActiveChanged()
    End Sub
    Partial Private Sub OnStatisticsViewerSvcIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnStatisticsViewerSvcIsActiveChanged()
    End Sub
    Partial Private Sub OnFirstStatisticsViewerDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFirstStatisticsViewerDateChanged()
    End Sub
    Partial Private Sub OnLastStatisticsViewerDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastStatisticsViewerDateChanged()
    End Sub
    Partial Private Sub OnSurveyStateIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyStateIDChanged()
    End Sub
    Partial Private Sub OnModelChanging(value As String)
    End Sub
    Partial Private Sub OnModelChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SurveyDescription() As String
		Get
			Return Me._SurveyDescription
		End Get
		Set
			If (String.Equals(Me._SurveyDescription, value) = false) Then
				Me.OnSurveyDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._SurveyDescription = value
				Me.SendPropertyChanged("SurveyDescription")
				Me.OnSurveyDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QueueURI", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QueueURI() As String
		Get
			Return Me._QueueURI
		End Get
		Set
			If (String.Equals(Me._QueueURI, value) = false) Then
				Me.OnQueueURIChanging(value)
				Me.SendPropertyChanging
				Me._QueueURI = value
				Me.SendPropertyChanged("QueueURI")
				Me.OnQueueURIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QueueName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QueueName() As String
		Get
			Return Me._QueueName
		End Get
		Set
			If (String.Equals(Me._QueueName, value) = false) Then
				Me.OnQueueNameChanging(value)
				Me.SendPropertyChanging
				Me._QueueName = value
				Me.SendPropertyChanged("QueueName")
				Me.OnQueueNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QueueComputer", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property QueueComputer() As String
		Get
			Return Me._QueueComputer
		End Get
		Set
			If (String.Equals(Me._QueueComputer, value) = false) Then
				Me.OnQueueComputerChanging(value)
				Me.SendPropertyChanging
				Me._QueueComputer = value
				Me.SendPropertyChanged("QueueComputer")
				Me.OnQueueComputerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyDataStoreID", DbType:="Int NOT NULL")>  _
	Public Property SurveyDataStoreID() As Integer
		Get
			Return Me._SurveyDataStoreID
		End Get
		Set
			If ((Me._SurveyDataStoreID = value)  _
						= false) Then
				Me.OnSurveyDataStoreIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyDataStoreID = value
				Me.SendPropertyChanged("SurveyDataStoreID")
				Me.OnSurveyDataStoreIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyDataStoreComputer", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SurveyDataStoreComputer() As String
		Get
			Return Me._SurveyDataStoreComputer
		End Get
		Set
			If (String.Equals(Me._SurveyDataStoreComputer, value) = false) Then
				Me.OnSurveyDataStoreComputerChanging(value)
				Me.SendPropertyChanging
				Me._SurveyDataStoreComputer = value
				Me.SendPropertyChanged("SurveyDataStoreComputer")
				Me.OnSurveyDataStoreComputerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginID", DbType:="Int NOT NULL")>  _
	Public Property LoginID() As Integer
		Get
			Return Me._LoginID
		End Get
		Set
			If ((Me._LoginID = value)  _
						= false) Then
				Me.OnLoginIDChanging(value)
				Me.SendPropertyChanging
				Me._LoginID = value
				Me.SendPropertyChanged("LoginID")
				Me.OnLoginIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="DateTime")>  _
	Public Property CreatedDate() As System.Nullable(Of Date)
		Get
			Return Me._CreatedDate
		End Get
		Set
			If (Me._CreatedDate.Equals(value) = false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastModifiedDate", DbType:="DateTime")>  _
	Public Property LastModifiedDate() As System.Nullable(Of Date)
		Get
			Return Me._LastModifiedDate
		End Get
		Set
			If (Me._LastModifiedDate.Equals(value) = false) Then
				Me.OnLastModifiedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastModifiedDate = value
				Me.SendPropertyChanged("LastModifiedDate")
				Me.OnLastModifiedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstRespondentPostedDate", DbType:="DateTime")>  _
	Public Property FirstRespondentPostedDate() As System.Nullable(Of Date)
		Get
			Return Me._FirstRespondentPostedDate
		End Get
		Set
			If (Me._FirstRespondentPostedDate.Equals(value) = false) Then
				Me.OnFirstRespondentPostedDateChanging(value)
				Me.SendPropertyChanging
				Me._FirstRespondentPostedDate = value
				Me.SendPropertyChanged("FirstRespondentPostedDate")
				Me.OnFirstRespondentPostedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastRespondentPostedDate", DbType:="DateTime")>  _
	Public Property LastRespondentPostedDate() As System.Nullable(Of Date)
		Get
			Return Me._LastRespondentPostedDate
		End Get
		Set
			If (Me._LastRespondentPostedDate.Equals(value) = false) Then
				Me.OnLastRespondentPostedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastRespondentPostedDate = value
				Me.SendPropertyChanged("LastRespondentPostedDate")
				Me.OnLastRespondentPostedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondenStartedtCount", DbType:="Int NOT NULL")>  _
	Public Property RespondenStartedtCount() As Integer
		Get
			Return Me._RespondenStartedtCount
		End Get
		Set
			If ((Me._RespondenStartedtCount = value)  _
						= false) Then
				Me.OnRespondenStartedtCountChanging(value)
				Me.SendPropertyChanging
				Me._RespondenStartedtCount = value
				Me.SendPropertyChanged("RespondenStartedtCount")
				Me.OnRespondenStartedtCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RespondentCompletedCount", DbType:="Int NOT NULL")>  _
	Public Property RespondentCompletedCount() As Integer
		Get
			Return Me._RespondentCompletedCount
		End Get
		Set
			If ((Me._RespondentCompletedCount = value)  _
						= false) Then
				Me.OnRespondentCompletedCountChanging(value)
				Me.SendPropertyChanging
				Me._RespondentCompletedCount = value
				Me.SendPropertyChanged("RespondentCompletedCount")
				Me.OnRespondentCompletedCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastRespondentStartedDate", DbType:="DateTime")>  _
	Public Property LastRespondentStartedDate() As System.Nullable(Of Date)
		Get
			Return Me._LastRespondentStartedDate
		End Get
		Set
			If (Me._LastRespondentStartedDate.Equals(value) = false) Then
				Me.OnLastRespondentStartedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastRespondentStartedDate = value
				Me.SendPropertyChanged("LastRespondentStartedDate")
				Me.OnLastRespondentStartedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastRespondentCompletedDate", DbType:="DateTime")>  _
	Public Property LastRespondentCompletedDate() As System.Nullable(Of Date)
		Get
			Return Me._LastRespondentCompletedDate
		End Get
		Set
			If (Me._LastRespondentCompletedDate.Equals(value) = false) Then
				Me.OnLastRespondentCompletedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastRespondentCompletedDate = value
				Me.SendPropertyChanged("LastRespondentCompletedDate")
				Me.OnLastRespondentCompletedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActiveRespondentsCount", DbType:="Int NOT NULL")>  _
	Public Property ActiveRespondentsCount() As Integer
		Get
			Return Me._ActiveRespondentsCount
		End Get
		Set
			If ((Me._ActiveRespondentsCount = value)  _
						= false) Then
				Me.OnActiveRespondentsCountChanging(value)
				Me.SendPropertyChanging
				Me._ActiveRespondentsCount = value
				Me.SendPropertyChanged("ActiveRespondentsCount")
				Me.OnActiveRespondentsCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstPublishedDate", DbType:="DateTime")>  _
	Public Property FirstPublishedDate() As System.Nullable(Of Date)
		Get
			Return Me._FirstPublishedDate
		End Get
		Set
			If (Me._FirstPublishedDate.Equals(value) = false) Then
				Me.OnFirstPublishedDateChanging(value)
				Me.SendPropertyChanging
				Me._FirstPublishedDate = value
				Me.SendPropertyChanged("FirstPublishedDate")
				Me.OnFirstPublishedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastPublishedDate", DbType:="DateTime")>  _
	Public Property LastPublishedDate() As System.Nullable(Of Date)
		Get
			Return Me._LastPublishedDate
		End Get
		Set
			If (Me._LastPublishedDate.Equals(value) = false) Then
				Me.OnLastPublishedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastPublishedDate = value
				Me.SendPropertyChanged("LastPublishedDate")
				Me.OnLastPublishedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyType", DbType:="Int NOT NULL")>  _
	Public Property SurveyType() As Integer
		Get
			Return Me._SurveyType
		End Get
		Set
			If ((Me._SurveyType = value)  _
						= false) Then
				Me.OnSurveyTypeChanging(value)
				Me.SendPropertyChanging
				Me._SurveyType = value
				Me.SendPropertyChanged("SurveyType")
				Me.OnSurveyTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResponsePostingSvcIsActive", DbType:="Bit NOT NULL")>  _
	Public Property ResponsePostingSvcIsActive() As Boolean
		Get
			Return Me._ResponsePostingSvcIsActive
		End Get
		Set
			If ((Me._ResponsePostingSvcIsActive = value)  _
						= false) Then
				Me.OnResponsePostingSvcIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._ResponsePostingSvcIsActive = value
				Me.SendPropertyChanged("ResponsePostingSvcIsActive")
				Me.OnResponsePostingSvcIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatisticsViewerSvcIsActive", DbType:="Bit NOT NULL")>  _
	Public Property StatisticsViewerSvcIsActive() As Boolean
		Get
			Return Me._StatisticsViewerSvcIsActive
		End Get
		Set
			If ((Me._StatisticsViewerSvcIsActive = value)  _
						= false) Then
				Me.OnStatisticsViewerSvcIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._StatisticsViewerSvcIsActive = value
				Me.SendPropertyChanged("StatisticsViewerSvcIsActive")
				Me.OnStatisticsViewerSvcIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstStatisticsViewerDate", DbType:="DateTime")>  _
	Public Property FirstStatisticsViewerDate() As System.Nullable(Of Date)
		Get
			Return Me._FirstStatisticsViewerDate
		End Get
		Set
			If (Me._FirstStatisticsViewerDate.Equals(value) = false) Then
				Me.OnFirstStatisticsViewerDateChanging(value)
				Me.SendPropertyChanging
				Me._FirstStatisticsViewerDate = value
				Me.SendPropertyChanged("FirstStatisticsViewerDate")
				Me.OnFirstStatisticsViewerDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastStatisticsViewerDate", DbType:="DateTime")>  _
	Public Property LastStatisticsViewerDate() As System.Nullable(Of Date)
		Get
			Return Me._LastStatisticsViewerDate
		End Get
		Set
			If (Me._LastStatisticsViewerDate.Equals(value) = false) Then
				Me.OnLastStatisticsViewerDateChanging(value)
				Me.SendPropertyChanging
				Me._LastStatisticsViewerDate = value
				Me.SendPropertyChanged("LastStatisticsViewerDate")
				Me.OnLastStatisticsViewerDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyStateID", DbType:="Int NOT NULL")>  _
	Public Property SurveyStateID() As Integer
		Get
			Return Me._SurveyStateID
		End Get
		Set
			If ((Me._SurveyStateID = value)  _
						= false) Then
				Me.OnSurveyStateIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyStateID = value
				Me.SendPropertyChanged("SurveyStateID")
				Me.OnSurveyStateIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Model", DbType:="VarChar(MAX)")>  _
	Public Property Model() As String
		Get
			Return Me._Model
		End Get
		Set
			If (String.Equals(Me._Model, value) = false) Then
				Me.OnModelChanging(value)
				Me.SendPropertyChanging
				Me._Model = value
				Me.SendPropertyChanged("Model")
				Me.OnModelChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SurveyDataStore")>  _
Partial Public Class SurveyDataStore
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyDataStoreID As Integer
	
	Private _AbsolutePath As String
	
	Private _ComputerID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyDataStoreIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyDataStoreIDChanged()
    End Sub
    Partial Private Sub OnAbsolutePathChanging(value As String)
    End Sub
    Partial Private Sub OnAbsolutePathChanged()
    End Sub
    Partial Private Sub OnComputerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnComputerIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyDataStoreID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SurveyDataStoreID() As Integer
		Get
			Return Me._SurveyDataStoreID
		End Get
		Set
			If ((Me._SurveyDataStoreID = value)  _
						= false) Then
				Me.OnSurveyDataStoreIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyDataStoreID = value
				Me.SendPropertyChanged("SurveyDataStoreID")
				Me.OnSurveyDataStoreIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AbsolutePath", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property AbsolutePath() As String
		Get
			Return Me._AbsolutePath
		End Get
		Set
			If (String.Equals(Me._AbsolutePath, value) = false) Then
				Me.OnAbsolutePathChanging(value)
				Me.SendPropertyChanging
				Me._AbsolutePath = value
				Me.SendPropertyChanged("AbsolutePath")
				Me.OnAbsolutePathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerID", DbType:="Int NOT NULL")>  _
	Public Property ComputerID() As Integer
		Get
			Return Me._ComputerID
		End Get
		Set
			If ((Me._ComputerID = value)  _
						= false) Then
				Me.OnComputerIDChanging(value)
				Me.SendPropertyChanging
				Me._ComputerID = value
				Me.SendPropertyChanged("ComputerID")
				Me.OnComputerIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	
	Private _CustomerID As Integer
	
	Private _CustomerName As String
	
	Private _PrimaryServerID As Integer
	
	Private _CurrentAuthorizationID As Integer
	
	Private _PrimaryContactInfoID As Integer
	
	Private _PrimaryDataStoreID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me._CustomerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="VarChar(75) NOT NULL", CanBeNull:=false)>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryServerID", DbType:="Int NOT NULL")>  _
	Public Property PrimaryServerID() As Integer
		Get
			Return Me._PrimaryServerID
		End Get
		Set
			If ((Me._PrimaryServerID = value)  _
						= false) Then
				Me._PrimaryServerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentAuthorizationID", DbType:="Int NOT NULL")>  _
	Public Property CurrentAuthorizationID() As Integer
		Get
			Return Me._CurrentAuthorizationID
		End Get
		Set
			If ((Me._CurrentAuthorizationID = value)  _
						= false) Then
				Me._CurrentAuthorizationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryContactInfoID", DbType:="Int NOT NULL")>  _
	Public Property PrimaryContactInfoID() As Integer
		Get
			Return Me._PrimaryContactInfoID
		End Get
		Set
			If ((Me._PrimaryContactInfoID = value)  _
						= false) Then
				Me._PrimaryContactInfoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryDataStoreID", DbType:="Int NOT NULL")>  _
	Public Property PrimaryDataStoreID() As Integer
		Get
			Return Me._PrimaryDataStoreID
		End Get
		Set
			If ((Me._PrimaryDataStoreID = value)  _
						= false) Then
				Me._PrimaryDataStoreID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Privilege")>  _
Partial Public Class Privilege
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PriviligeID As Integer
	
	Private _PrivilegeDescription As String
	
	Private _GlobalPrivilegeID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPriviligeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriviligeIDChanged()
    End Sub
    Partial Private Sub OnPrivilegeDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPrivilegeDescriptionChanged()
    End Sub
    Partial Private Sub OnGlobalPrivilegeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGlobalPrivilegeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriviligeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PriviligeID() As Integer
		Get
			Return Me._PriviligeID
		End Get
		Set
			If ((Me._PriviligeID = value)  _
						= false) Then
				Me.OnPriviligeIDChanging(value)
				Me.SendPropertyChanging
				Me._PriviligeID = value
				Me.SendPropertyChanged("PriviligeID")
				Me.OnPriviligeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrivilegeDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PrivilegeDescription() As String
		Get
			Return Me._PrivilegeDescription
		End Get
		Set
			If (String.Equals(Me._PrivilegeDescription, value) = false) Then
				Me.OnPrivilegeDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._PrivilegeDescription = value
				Me.SendPropertyChanged("PrivilegeDescription")
				Me.OnPrivilegeDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GlobalPrivilegeID", DbType:="Int NOT NULL")>  _
	Public Property GlobalPrivilegeID() As Integer
		Get
			Return Me._GlobalPrivilegeID
		End Get
		Set
			If ((Me._GlobalPrivilegeID = value)  _
						= false) Then
				Me.OnGlobalPrivilegeIDChanging(value)
				Me.SendPropertyChanging
				Me._GlobalPrivilegeID = value
				Me.SendPropertyChanged("GlobalPrivilegeID")
				Me.OnGlobalPrivilegeIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ComputerInfo")>  _
Partial Public Class ComputerInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ComputerID As Integer
	
	Private _State As String
	
	Private _ServerName As String
	
	Private _GlobalComputerID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnComputerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnComputerIDChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnServerNameChanging(value As String)
    End Sub
    Partial Private Sub OnServerNameChanged()
    End Sub
    Partial Private Sub OnGlobalComputerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGlobalComputerIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ComputerID() As Integer
		Get
			Return Me._ComputerID
		End Get
		Set
			If ((Me._ComputerID = value)  _
						= false) Then
				Me.OnComputerIDChanging(value)
				Me.SendPropertyChanging
				Me._ComputerID = value
				Me.SendPropertyChanged("ComputerID")
				Me.OnComputerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServerName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ServerName() As String
		Get
			Return Me._ServerName
		End Get
		Set
			If (String.Equals(Me._ServerName, value) = false) Then
				Me.OnServerNameChanging(value)
				Me.SendPropertyChanging
				Me._ServerName = value
				Me.SendPropertyChanged("ServerName")
				Me.OnServerNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GlobalComputerID", DbType:="Int NOT NULL")>  _
	Public Property GlobalComputerID() As Integer
		Get
			Return Me._GlobalComputerID
		End Get
		Set
			If ((Me._GlobalComputerID = value)  _
						= false) Then
				Me.OnGlobalComputerIDChanging(value)
				Me.SendPropertyChanging
				Me._GlobalComputerID = value
				Me.SendPropertyChanged("GlobalComputerID")
				Me.OnGlobalComputerIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ImagesStore")>  _
Partial Public Class ImagesStore
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ImageID As Integer
	
	Private _SurveyID As System.Nullable(Of Integer)
	
	Private _PCMID As System.Nullable(Of Integer)
	
	Private _PermPCMGuidString As String
	
	Private _Height As System.Nullable(Of Integer)
	
	Private _Width As System.Nullable(Of Integer)
	
	Private _PCElementID As System.Nullable(Of Integer)
	
	Private _ByteArray As System.Data.Linq.Binary
	
	Private _Format As System.Nullable(Of Integer)
	
	Private _SequenceNumber As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnImageIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnImageIDChanged()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnPCMIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPCMIDChanged()
    End Sub
    Partial Private Sub OnPermPCMGuidStringChanging(value As String)
    End Sub
    Partial Private Sub OnPermPCMGuidStringChanged()
    End Sub
    Partial Private Sub OnHeightChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnHeightChanged()
    End Sub
    Partial Private Sub OnWidthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnWidthChanged()
    End Sub
    Partial Private Sub OnPCElementIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPCElementIDChanged()
    End Sub
    Partial Private Sub OnByteArrayChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnByteArrayChanged()
    End Sub
    Partial Private Sub OnFormatChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnFormatChanged()
    End Sub
    Partial Private Sub OnSequenceNumberChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSequenceNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImageID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ImageID() As Integer
		Get
			Return Me._ImageID
		End Get
		Set
			If ((Me._ImageID = value)  _
						= false) Then
				Me.OnImageIDChanging(value)
				Me.SendPropertyChanging
				Me._ImageID = value
				Me.SendPropertyChanged("ImageID")
				Me.OnImageIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int")>  _
	Public Property SurveyID() As System.Nullable(Of Integer)
		Get
			Return Me._SurveyID
		End Get
		Set
			If (Me._SurveyID.Equals(value) = false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PCMID", DbType:="Int")>  _
	Public Property PCMID() As System.Nullable(Of Integer)
		Get
			Return Me._PCMID
		End Get
		Set
			If (Me._PCMID.Equals(value) = false) Then
				Me.OnPCMIDChanging(value)
				Me.SendPropertyChanging
				Me._PCMID = value
				Me.SendPropertyChanged("PCMID")
				Me.OnPCMIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PermPCMGuidString", DbType:="VarChar(50)")>  _
	Public Property PermPCMGuidString() As String
		Get
			Return Me._PermPCMGuidString
		End Get
		Set
			If (String.Equals(Me._PermPCMGuidString, value) = false) Then
				Me.OnPermPCMGuidStringChanging(value)
				Me.SendPropertyChanging
				Me._PermPCMGuidString = value
				Me.SendPropertyChanged("PermPCMGuidString")
				Me.OnPermPCMGuidStringChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Height", DbType:="Int")>  _
	Public Property Height() As System.Nullable(Of Integer)
		Get
			Return Me._Height
		End Get
		Set
			If (Me._Height.Equals(value) = false) Then
				Me.OnHeightChanging(value)
				Me.SendPropertyChanging
				Me._Height = value
				Me.SendPropertyChanged("Height")
				Me.OnHeightChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Width", DbType:="Int")>  _
	Public Property Width() As System.Nullable(Of Integer)
		Get
			Return Me._Width
		End Get
		Set
			If (Me._Width.Equals(value) = false) Then
				Me.OnWidthChanging(value)
				Me.SendPropertyChanging
				Me._Width = value
				Me.SendPropertyChanged("Width")
				Me.OnWidthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PCElementID", DbType:="Int")>  _
	Public Property PCElementID() As System.Nullable(Of Integer)
		Get
			Return Me._PCElementID
		End Get
		Set
			If (Me._PCElementID.Equals(value) = false) Then
				Me.OnPCElementIDChanging(value)
				Me.SendPropertyChanging
				Me._PCElementID = value
				Me.SendPropertyChanged("PCElementID")
				Me.OnPCElementIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ByteArray", DbType:="Image", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property ByteArray() As System.Data.Linq.Binary
		Get
			Return Me._ByteArray
		End Get
		Set
			If (Object.Equals(Me._ByteArray, value) = false) Then
				Me.OnByteArrayChanging(value)
				Me.SendPropertyChanging
				Me._ByteArray = value
				Me.SendPropertyChanged("ByteArray")
				Me.OnByteArrayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Format", DbType:="Int")>  _
	Public Property Format() As System.Nullable(Of Integer)
		Get
			Return Me._Format
		End Get
		Set
			If (Me._Format.Equals(value) = false) Then
				Me.OnFormatChanging(value)
				Me.SendPropertyChanging
				Me._Format = value
				Me.SendPropertyChanged("Format")
				Me.OnFormatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SequenceNumber", DbType:="Int")>  _
	Public Property SequenceNumber() As System.Nullable(Of Integer)
		Get
			Return Me._SequenceNumber
		End Get
		Set
			If (Me._SequenceNumber.Equals(value) = false) Then
				Me.OnSequenceNumberChanging(value)
				Me.SendPropertyChanging
				Me._SequenceNumber = value
				Me.SendPropertyChanged("SequenceNumber")
				Me.OnSequenceNumberChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LoginSurveyPrivilege")>  _
Partial Public Class LoginSurveyPrivilege
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LoginSurveyPrivilegeID As Integer
	
	Private _LoginID As Integer
	
	Private _SurveyID As Integer
	
	Private _PrivilegeID As Long
	
	Private _GlobalSMLoginID As Integer
	
	Private _PrivEnumBitMask As Long
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLoginSurveyPrivilegeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLoginSurveyPrivilegeIDChanged()
    End Sub
    Partial Private Sub OnLoginIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLoginIDChanged()
    End Sub
    Partial Private Sub OnSurveyIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyIDChanged()
    End Sub
    Partial Private Sub OnPrivilegeIDChanging(value As Long)
    End Sub
    Partial Private Sub OnPrivilegeIDChanged()
    End Sub
    Partial Private Sub OnGlobalSMLoginIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGlobalSMLoginIDChanged()
    End Sub
    Partial Private Sub OnPrivEnumBitMaskChanging(value As Long)
    End Sub
    Partial Private Sub OnPrivEnumBitMaskChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginSurveyPrivilegeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LoginSurveyPrivilegeID() As Integer
		Get
			Return Me._LoginSurveyPrivilegeID
		End Get
		Set
			If ((Me._LoginSurveyPrivilegeID = value)  _
						= false) Then
				Me.OnLoginSurveyPrivilegeIDChanging(value)
				Me.SendPropertyChanging
				Me._LoginSurveyPrivilegeID = value
				Me.SendPropertyChanged("LoginSurveyPrivilegeID")
				Me.OnLoginSurveyPrivilegeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginID", DbType:="Int NOT NULL")>  _
	Public Property LoginID() As Integer
		Get
			Return Me._LoginID
		End Get
		Set
			If ((Me._LoginID = value)  _
						= false) Then
				Me.OnLoginIDChanging(value)
				Me.SendPropertyChanging
				Me._LoginID = value
				Me.SendPropertyChanged("LoginID")
				Me.OnLoginIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me.OnSurveyIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyID = value
				Me.SendPropertyChanged("SurveyID")
				Me.OnSurveyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrivilegeID", DbType:="BigInt NOT NULL")>  _
	Public Property PrivilegeID() As Long
		Get
			Return Me._PrivilegeID
		End Get
		Set
			If ((Me._PrivilegeID = value)  _
						= false) Then
				Me.OnPrivilegeIDChanging(value)
				Me.SendPropertyChanging
				Me._PrivilegeID = value
				Me.SendPropertyChanged("PrivilegeID")
				Me.OnPrivilegeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GlobalSMLoginID", DbType:="Int NOT NULL")>  _
	Public Property GlobalSMLoginID() As Integer
		Get
			Return Me._GlobalSMLoginID
		End Get
		Set
			If ((Me._GlobalSMLoginID = value)  _
						= false) Then
				Me.OnGlobalSMLoginIDChanging(value)
				Me.SendPropertyChanging
				Me._GlobalSMLoginID = value
				Me.SendPropertyChanged("GlobalSMLoginID")
				Me.OnGlobalSMLoginIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrivEnumBitMask", DbType:="BigInt NOT NULL")>  _
	Public Property PrivEnumBitMask() As Long
		Get
			Return Me._PrivEnumBitMask
		End Get
		Set
			If ((Me._PrivEnumBitMask = value)  _
						= false) Then
				Me.OnPrivEnumBitMaskChanging(value)
				Me.SendPropertyChanging
				Me._PrivEnumBitMask = value
				Me.SendPropertyChanged("PrivEnumBitMask")
				Me.OnPrivEnumBitMaskChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LoginInfo")>  _
Partial Public Class LoginInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LogInID As Integer
	
	Private _LoginEmail As String
	
	Private _CustomerID As Integer
	
	Private _LastLoginDate As System.Nullable(Of Date)
	
	Private _IsLoggedIn As System.Nullable(Of Boolean)
	
	Private _PasswordHash As System.Nullable(Of Integer)
	
	Private _PasswordLastSetDate As System.Nullable(Of Date)
	
	Private _LogInID_GSM As System.Nullable(Of Integer)
	
	Private _LoginEmailRawString As String
	
	Private _IsCustomerOriginator As System.Nullable(Of Boolean)
	
	Private _PrivBitMask As System.Nullable(Of Long)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLogInIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLogInIDChanged()
    End Sub
    Partial Private Sub OnLoginEmailChanging(value As String)
    End Sub
    Partial Private Sub OnLoginEmailChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnIsLoggedInChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsLoggedInChanged()
    End Sub
    Partial Private Sub OnPasswordHashChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPasswordHashChanged()
    End Sub
    Partial Private Sub OnPasswordLastSetDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPasswordLastSetDateChanged()
    End Sub
    Partial Private Sub OnLogInID_GSMChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLogInID_GSMChanged()
    End Sub
    Partial Private Sub OnLoginEmailRawStringChanging(value As String)
    End Sub
    Partial Private Sub OnLoginEmailRawStringChanged()
    End Sub
    Partial Private Sub OnIsCustomerOriginatorChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsCustomerOriginatorChanged()
    End Sub
    Partial Private Sub OnPrivBitMaskChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPrivBitMaskChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogInID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LogInID() As Integer
		Get
			Return Me._LogInID
		End Get
		Set
			If ((Me._LogInID = value)  _
						= false) Then
				Me.OnLogInIDChanging(value)
				Me.SendPropertyChanging
				Me._LogInID = value
				Me.SendPropertyChanged("LogInID")
				Me.OnLogInIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginEmail", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property LoginEmail() As String
		Get
			Return Me._LoginEmail
		End Get
		Set
			If (String.Equals(Me._LoginEmail, value) = false) Then
				Me.OnLoginEmailChanging(value)
				Me.SendPropertyChanging
				Me._LoginEmail = value
				Me.SendPropertyChanged("LoginEmail")
				Me.OnLoginEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int NOT NULL")>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime")>  _
	Public Property LastLoginDate() As System.Nullable(Of Date)
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If (Me._LastLoginDate.Equals(value) = false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLoggedIn", DbType:="Bit")>  _
	Public Property IsLoggedIn() As System.Nullable(Of Boolean)
		Get
			Return Me._IsLoggedIn
		End Get
		Set
			If (Me._IsLoggedIn.Equals(value) = false) Then
				Me.OnIsLoggedInChanging(value)
				Me.SendPropertyChanging
				Me._IsLoggedIn = value
				Me.SendPropertyChanged("IsLoggedIn")
				Me.OnIsLoggedInChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordHash", DbType:="Int")>  _
	Public Property PasswordHash() As System.Nullable(Of Integer)
		Get
			Return Me._PasswordHash
		End Get
		Set
			If (Me._PasswordHash.Equals(value) = false) Then
				Me.OnPasswordHashChanging(value)
				Me.SendPropertyChanging
				Me._PasswordHash = value
				Me.SendPropertyChanged("PasswordHash")
				Me.OnPasswordHashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordLastSetDate", DbType:="DateTime")>  _
	Public Property PasswordLastSetDate() As System.Nullable(Of Date)
		Get
			Return Me._PasswordLastSetDate
		End Get
		Set
			If (Me._PasswordLastSetDate.Equals(value) = false) Then
				Me.OnPasswordLastSetDateChanging(value)
				Me.SendPropertyChanging
				Me._PasswordLastSetDate = value
				Me.SendPropertyChanged("PasswordLastSetDate")
				Me.OnPasswordLastSetDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogInID_GSM", DbType:="Int")>  _
	Public Property LogInID_GSM() As System.Nullable(Of Integer)
		Get
			Return Me._LogInID_GSM
		End Get
		Set
			If (Me._LogInID_GSM.Equals(value) = false) Then
				Me.OnLogInID_GSMChanging(value)
				Me.SendPropertyChanging
				Me._LogInID_GSM = value
				Me.SendPropertyChanged("LogInID_GSM")
				Me.OnLogInID_GSMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginEmailRawString", DbType:="VarChar(100)")>  _
	Public Property LoginEmailRawString() As String
		Get
			Return Me._LoginEmailRawString
		End Get
		Set
			If (String.Equals(Me._LoginEmailRawString, value) = false) Then
				Me.OnLoginEmailRawStringChanging(value)
				Me.SendPropertyChanging
				Me._LoginEmailRawString = value
				Me.SendPropertyChanged("LoginEmailRawString")
				Me.OnLoginEmailRawStringChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCustomerOriginator", DbType:="Bit")>  _
	Public Property IsCustomerOriginator() As System.Nullable(Of Boolean)
		Get
			Return Me._IsCustomerOriginator
		End Get
		Set
			If (Me._IsCustomerOriginator.Equals(value) = false) Then
				Me.OnIsCustomerOriginatorChanging(value)
				Me.SendPropertyChanging
				Me._IsCustomerOriginator = value
				Me.SendPropertyChanged("IsCustomerOriginator")
				Me.OnIsCustomerOriginatorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrivBitMask", DbType:="BigInt")>  _
	Public Property PrivBitMask() As System.Nullable(Of Long)
		Get
			Return Me._PrivBitMask
		End Get
		Set
			If (Me._PrivBitMask.Equals(value) = false) Then
				Me.OnPrivBitMaskChanging(value)
				Me.SendPropertyChanging
				Me._PrivBitMask = value
				Me.SendPropertyChanged("PrivBitMask")
				Me.OnPrivBitMaskChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class proc_GetSurveyIDsAndPrivilegeIDsByLoginIDResult
	
	Private _SurveyID As Integer
	
	Private _PrivilegeID As Long
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyID", DbType:="Int NOT NULL")>  _
	Public Property SurveyID() As Integer
		Get
			Return Me._SurveyID
		End Get
		Set
			If ((Me._SurveyID = value)  _
						= false) Then
				Me._SurveyID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrivilegeID", DbType:="BigInt NOT NULL")>  _
	Public Property PrivilegeID() As Long
		Get
			Return Me._PrivilegeID
		End Get
		Set
			If ((Me._PrivilegeID = value)  _
						= false) Then
				Me._PrivilegeID = value
			End If
		End Set
	End Property
End Class
