'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.225
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="SurveyMaster")>  _
Partial Public Class L2S_EptSvcDCDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertWCFSvCType(instance As WCFSvCType)
    End Sub
  Partial Private Sub UpdateWCFSvCType(instance As WCFSvCType)
    End Sub
  Partial Private Sub DeleteWCFSvCType(instance As WCFSvCType)
    End Sub
  Partial Private Sub InsertPrivilege(instance As Privilege)
    End Sub
  Partial Private Sub UpdatePrivilege(instance As Privilege)
    End Sub
  Partial Private Sub DeletePrivilege(instance As Privilege)
    End Sub
  Partial Private Sub InsertLoginInfo(instance As LoginInfo)
    End Sub
  Partial Private Sub UpdateLoginInfo(instance As LoginInfo)
    End Sub
  Partial Private Sub DeleteLoginInfo(instance As LoginInfo)
    End Sub
  Partial Private Sub InsertSurveyDataStore(instance As SurveyDataStore)
    End Sub
  Partial Private Sub UpdateSurveyDataStore(instance As SurveyDataStore)
    End Sub
  Partial Private Sub DeleteSurveyDataStore(instance As SurveyDataStore)
    End Sub
  Partial Private Sub InsertComputerInfo(instance As ComputerInfo)
    End Sub
  Partial Private Sub UpdateComputerInfo(instance As ComputerInfo)
    End Sub
  Partial Private Sub DeleteComputerInfo(instance As ComputerInfo)
    End Sub
  Partial Private Sub InsertClientOFWCFServiceInfo(instance As ClientOFWCFServiceInfo)
    End Sub
  Partial Private Sub UpdateClientOFWCFServiceInfo(instance As ClientOFWCFServiceInfo)
    End Sub
  Partial Private Sub DeleteClientOFWCFServiceInfo(instance As ClientOFWCFServiceInfo)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.EndPtDataCntxtSvcNS.My.MySettings.Default.SurveyMasterConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property WCFServiceInfos() As System.Data.Linq.Table(Of WCFServiceInfo)
		Get
			Return Me.GetTable(Of WCFServiceInfo)
		End Get
	End Property
	
	Public ReadOnly Property WCFSvcPrivilegeConfigs() As System.Data.Linq.Table(Of WCFSvcPrivilegeConfig)
		Get
			Return Me.GetTable(Of WCFSvcPrivilegeConfig)
		End Get
	End Property
	
	Public ReadOnly Property WCFSvCTypes() As System.Data.Linq.Table(Of WCFSvCType)
		Get
			Return Me.GetTable(Of WCFSvCType)
		End Get
	End Property
	
	Public ReadOnly Property Privileges() As System.Data.Linq.Table(Of Privilege)
		Get
			Return Me.GetTable(Of Privilege)
		End Get
	End Property
	
	Public ReadOnly Property LoginInfos() As System.Data.Linq.Table(Of LoginInfo)
		Get
			Return Me.GetTable(Of LoginInfo)
		End Get
	End Property
	
	Public ReadOnly Property SurveyDataStores() As System.Data.Linq.Table(Of SurveyDataStore)
		Get
			Return Me.GetTable(Of SurveyDataStore)
		End Get
	End Property
	
	Public ReadOnly Property ComputerInfos() As System.Data.Linq.Table(Of ComputerInfo)
		Get
			Return Me.GetTable(Of ComputerInfo)
		End Get
	End Property
	
	Public ReadOnly Property ClientOFWCFServiceInfos() As System.Data.Linq.Table(Of ClientOFWCFServiceInfo)
		Get
			Return Me.GetTable(Of ClientOFWCFServiceInfo)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WCFServiceInfo")>  _
Partial Public Class WCFServiceInfo
	
	Private _WCFServiceID As Integer
	
	Private _Name As String
	
	Private _ComputerServerName As String
	
	Private _ComputerID As System.Nullable(Of Integer)
	
	Private _WCFSvcTypeID As Integer
	
	Private _IsIncludedExposeEndPt As System.Nullable(Of Boolean)
	
	Private _CommandSvcName As String
	
	Private _BaseAddress As String
	
	Private _Contract As String
	
	Private _Address As String
	
	Private _CommandSvcBaseAddress As String
	
	Private _CommandSvcContract As String
	
	Private _CommandSvcAddress As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WCFServiceID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property WCFServiceID() As Integer
		Get
			Return Me._WCFServiceID
		End Get
		Set
			If ((Me._WCFServiceID = value)  _
						= false) Then
				Me._WCFServiceID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerServerName", DbType:="VarChar(50)")>  _
	Public Property ComputerServerName() As String
		Get
			Return Me._ComputerServerName
		End Get
		Set
			If (String.Equals(Me._ComputerServerName, value) = false) Then
				Me._ComputerServerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerID", DbType:="Int")>  _
	Public Property ComputerID() As System.Nullable(Of Integer)
		Get
			Return Me._ComputerID
		End Get
		Set
			If (Me._ComputerID.Equals(value) = false) Then
				Me._ComputerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WCFSvcTypeID", DbType:="Int NOT NULL")>  _
	Public Property WCFSvcTypeID() As Integer
		Get
			Return Me._WCFSvcTypeID
		End Get
		Set
			If ((Me._WCFSvcTypeID = value)  _
						= false) Then
				Me._WCFSvcTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsIncludedExposeEndPt", DbType:="Bit")>  _
	Public Property IsIncludedExposeEndPt() As System.Nullable(Of Boolean)
		Get
			Return Me._IsIncludedExposeEndPt
		End Get
		Set
			If (Me._IsIncludedExposeEndPt.Equals(value) = false) Then
				Me._IsIncludedExposeEndPt = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommandSvcName", DbType:="VarChar(50)")>  _
	Public Property CommandSvcName() As String
		Get
			Return Me._CommandSvcName
		End Get
		Set
			If (String.Equals(Me._CommandSvcName, value) = false) Then
				Me._CommandSvcName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BaseAddress", DbType:="VarChar(100)")>  _
	Public Property BaseAddress() As String
		Get
			Return Me._BaseAddress
		End Get
		Set
			If (String.Equals(Me._BaseAddress, value) = false) Then
				Me._BaseAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contract", DbType:="VarChar(50)")>  _
	Public Property Contract() As String
		Get
			Return Me._Contract
		End Get
		Set
			If (String.Equals(Me._Contract, value) = false) Then
				Me._Contract = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(50)")>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me._Address = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommandSvcBaseAddress", DbType:="VarChar(100)")>  _
	Public Property CommandSvcBaseAddress() As String
		Get
			Return Me._CommandSvcBaseAddress
		End Get
		Set
			If (String.Equals(Me._CommandSvcBaseAddress, value) = false) Then
				Me._CommandSvcBaseAddress = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommandSvcContract", DbType:="VarChar(50)")>  _
	Public Property CommandSvcContract() As String
		Get
			Return Me._CommandSvcContract
		End Get
		Set
			If (String.Equals(Me._CommandSvcContract, value) = false) Then
				Me._CommandSvcContract = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommandSvcAddress", DbType:="VarChar(50)")>  _
	Public Property CommandSvcAddress() As String
		Get
			Return Me._CommandSvcAddress
		End Get
		Set
			If (String.Equals(Me._CommandSvcAddress, value) = false) Then
				Me._CommandSvcAddress = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WCFSvcPrivilegeConfig")>  _
Partial Public Class WCFSvcPrivilegeConfig
	
	Private _WCFPrivilegeConfigID As Integer
	
	Private _WCFSvcTypeID As Integer
	
	Private _PrivilegeID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WCFPrivilegeConfigID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property WCFPrivilegeConfigID() As Integer
		Get
			Return Me._WCFPrivilegeConfigID
		End Get
		Set
			If ((Me._WCFPrivilegeConfigID = value)  _
						= false) Then
				Me._WCFPrivilegeConfigID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WCFSvcTypeID", DbType:="Int NOT NULL")>  _
	Public Property WCFSvcTypeID() As Integer
		Get
			Return Me._WCFSvcTypeID
		End Get
		Set
			If ((Me._WCFSvcTypeID = value)  _
						= false) Then
				Me._WCFSvcTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrivilegeID", DbType:="Int NOT NULL")>  _
	Public Property PrivilegeID() As Integer
		Get
			Return Me._PrivilegeID
		End Get
		Set
			If ((Me._PrivilegeID = value)  _
						= false) Then
				Me._PrivilegeID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WCFSvCType")>  _
Partial Public Class WCFSvCType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _WCFSvcTypeID As Integer
	
	Private _WCFSvcTypeContract As String
	
	Private _WCFSvcCommandSvcContract As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnWCFSvcTypeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnWCFSvcTypeIDChanged()
    End Sub
    Partial Private Sub OnWCFSvcTypeContractChanging(value As String)
    End Sub
    Partial Private Sub OnWCFSvcTypeContractChanged()
    End Sub
    Partial Private Sub OnWCFSvcCommandSvcContractChanging(value As String)
    End Sub
    Partial Private Sub OnWCFSvcCommandSvcContractChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WCFSvcTypeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property WCFSvcTypeID() As Integer
		Get
			Return Me._WCFSvcTypeID
		End Get
		Set
			If ((Me._WCFSvcTypeID = value)  _
						= false) Then
				Me.OnWCFSvcTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._WCFSvcTypeID = value
				Me.SendPropertyChanged("WCFSvcTypeID")
				Me.OnWCFSvcTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WCFSvcTypeContract", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property WCFSvcTypeContract() As String
		Get
			Return Me._WCFSvcTypeContract
		End Get
		Set
			If (String.Equals(Me._WCFSvcTypeContract, value) = false) Then
				Me.OnWCFSvcTypeContractChanging(value)
				Me.SendPropertyChanging
				Me._WCFSvcTypeContract = value
				Me.SendPropertyChanged("WCFSvcTypeContract")
				Me.OnWCFSvcTypeContractChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WCFSvcCommandSvcContract", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property WCFSvcCommandSvcContract() As String
		Get
			Return Me._WCFSvcCommandSvcContract
		End Get
		Set
			If (String.Equals(Me._WCFSvcCommandSvcContract, value) = false) Then
				Me.OnWCFSvcCommandSvcContractChanging(value)
				Me.SendPropertyChanging
				Me._WCFSvcCommandSvcContract = value
				Me.SendPropertyChanged("WCFSvcCommandSvcContract")
				Me.OnWCFSvcCommandSvcContractChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Privilege")>  _
Partial Public Class Privilege
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PriviligeID As Integer
	
	Private _PrivilegeDescription As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPriviligeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriviligeIDChanged()
    End Sub
    Partial Private Sub OnPrivilegeDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnPrivilegeDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriviligeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PriviligeID() As Integer
		Get
			Return Me._PriviligeID
		End Get
		Set
			If ((Me._PriviligeID = value)  _
						= false) Then
				Me.OnPriviligeIDChanging(value)
				Me.SendPropertyChanging
				Me._PriviligeID = value
				Me.SendPropertyChanged("PriviligeID")
				Me.OnPriviligeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrivilegeDescription", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PrivilegeDescription() As String
		Get
			Return Me._PrivilegeDescription
		End Get
		Set
			If (String.Equals(Me._PrivilegeDescription, value) = false) Then
				Me.OnPrivilegeDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._PrivilegeDescription = value
				Me.SendPropertyChanged("PrivilegeDescription")
				Me.OnPrivilegeDescriptionChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LoginInfo")>  _
Partial Public Class LoginInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LogInID As Integer
	
	Private _LoginEmail As String
	
	Private _CustomerID As Integer
	
	Private _LastLoginDate As Date
	
	Private _IsLoggedIn As Boolean
	
	Private _PasswordHash As Integer
	
	Private _PasswordLastSetDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLogInIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLogInIDChanged()
    End Sub
    Partial Private Sub OnLoginEmailChanging(value As String)
    End Sub
    Partial Private Sub OnLoginEmailChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnLastLoginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastLoginDateChanged()
    End Sub
    Partial Private Sub OnIsLoggedInChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsLoggedInChanged()
    End Sub
    Partial Private Sub OnPasswordHashChanging(value As Integer)
    End Sub
    Partial Private Sub OnPasswordHashChanged()
    End Sub
    Partial Private Sub OnPasswordLastSetDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPasswordLastSetDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LogInID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LogInID() As Integer
		Get
			Return Me._LogInID
		End Get
		Set
			If ((Me._LogInID = value)  _
						= false) Then
				Me.OnLogInIDChanging(value)
				Me.SendPropertyChanging
				Me._LogInID = value
				Me.SendPropertyChanged("LogInID")
				Me.OnLogInIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginEmail", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property LoginEmail() As String
		Get
			Return Me._LoginEmail
		End Get
		Set
			If (String.Equals(Me._LoginEmail, value) = false) Then
				Me.OnLoginEmailChanging(value)
				Me.SendPropertyChanging
				Me._LoginEmail = value
				Me.SendPropertyChanged("LoginEmail")
				Me.OnLoginEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int NOT NULL")>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastLoginDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastLoginDate() As Date
		Get
			Return Me._LastLoginDate
		End Get
		Set
			If ((Me._LastLoginDate = value)  _
						= false) Then
				Me.OnLastLoginDateChanging(value)
				Me.SendPropertyChanging
				Me._LastLoginDate = value
				Me.SendPropertyChanged("LastLoginDate")
				Me.OnLastLoginDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLoggedIn", DbType:="Bit NOT NULL")>  _
	Public Property IsLoggedIn() As Boolean
		Get
			Return Me._IsLoggedIn
		End Get
		Set
			If ((Me._IsLoggedIn = value)  _
						= false) Then
				Me.OnIsLoggedInChanging(value)
				Me.SendPropertyChanging
				Me._IsLoggedIn = value
				Me.SendPropertyChanged("IsLoggedIn")
				Me.OnIsLoggedInChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordHash", DbType:="Int NOT NULL")>  _
	Public Property PasswordHash() As Integer
		Get
			Return Me._PasswordHash
		End Get
		Set
			If ((Me._PasswordHash = value)  _
						= false) Then
				Me.OnPasswordHashChanging(value)
				Me.SendPropertyChanging
				Me._PasswordHash = value
				Me.SendPropertyChanged("PasswordHash")
				Me.OnPasswordHashChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PasswordLastSetDate", DbType:="DateTime")>  _
	Public Property PasswordLastSetDate() As System.Nullable(Of Date)
		Get
			Return Me._PasswordLastSetDate
		End Get
		Set
			If (Me._PasswordLastSetDate.Equals(value) = false) Then
				Me.OnPasswordLastSetDateChanging(value)
				Me.SendPropertyChanging
				Me._PasswordLastSetDate = value
				Me.SendPropertyChanged("PasswordLastSetDate")
				Me.OnPasswordLastSetDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SurveyDataStore")>  _
Partial Public Class SurveyDataStore
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SurveyDataStoreID As Integer
	
	Private _AbsolutePath As String
	
	Private _ComputerID As Integer
	
	Private _DatabaseName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSurveyDataStoreIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSurveyDataStoreIDChanged()
    End Sub
    Partial Private Sub OnAbsolutePathChanging(value As String)
    End Sub
    Partial Private Sub OnAbsolutePathChanged()
    End Sub
    Partial Private Sub OnComputerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnComputerIDChanged()
    End Sub
    Partial Private Sub OnDatabaseNameChanging(value As String)
    End Sub
    Partial Private Sub OnDatabaseNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SurveyDataStoreID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SurveyDataStoreID() As Integer
		Get
			Return Me._SurveyDataStoreID
		End Get
		Set
			If ((Me._SurveyDataStoreID = value)  _
						= false) Then
				Me.OnSurveyDataStoreIDChanging(value)
				Me.SendPropertyChanging
				Me._SurveyDataStoreID = value
				Me.SendPropertyChanged("SurveyDataStoreID")
				Me.OnSurveyDataStoreIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AbsolutePath", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property AbsolutePath() As String
		Get
			Return Me._AbsolutePath
		End Get
		Set
			If (String.Equals(Me._AbsolutePath, value) = false) Then
				Me.OnAbsolutePathChanging(value)
				Me.SendPropertyChanging
				Me._AbsolutePath = value
				Me.SendPropertyChanged("AbsolutePath")
				Me.OnAbsolutePathChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerID", DbType:="Int NOT NULL")>  _
	Public Property ComputerID() As Integer
		Get
			Return Me._ComputerID
		End Get
		Set
			If ((Me._ComputerID = value)  _
						= false) Then
				Me.OnComputerIDChanging(value)
				Me.SendPropertyChanging
				Me._ComputerID = value
				Me.SendPropertyChanged("ComputerID")
				Me.OnComputerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatabaseName", DbType:="VarChar(50)")>  _
	Public Property DatabaseName() As String
		Get
			Return Me._DatabaseName
		End Get
		Set
			If (String.Equals(Me._DatabaseName, value) = false) Then
				Me.OnDatabaseNameChanging(value)
				Me.SendPropertyChanging
				Me._DatabaseName = value
				Me.SendPropertyChanged("DatabaseName")
				Me.OnDatabaseNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ComputerInfo")>  _
Partial Public Class ComputerInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ComputerID As Integer
	
	Private _State As String
	
	Private _ServerName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnComputerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnComputerIDChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As String)
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnServerNameChanging(value As String)
    End Sub
    Partial Private Sub OnServerNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ComputerID() As Integer
		Get
			Return Me._ComputerID
		End Get
		Set
			If ((Me._ComputerID = value)  _
						= false) Then
				Me.OnComputerIDChanging(value)
				Me.SendPropertyChanging
				Me._ComputerID = value
				Me.SendPropertyChanged("ComputerID")
				Me.OnComputerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_State", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property State() As String
		Get
			Return Me._State
		End Get
		Set
			If (String.Equals(Me._State, value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServerName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ServerName() As String
		Get
			Return Me._ServerName
		End Get
		Set
			If (String.Equals(Me._ServerName, value) = false) Then
				Me.OnServerNameChanging(value)
				Me.SendPropertyChanging
				Me._ServerName = value
				Me.SendPropertyChanged("ServerName")
				Me.OnServerNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ClientOFWCFServiceInfo")>  _
Partial Public Class ClientOFWCFServiceInfo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _SvcthatCallsWCFSvcInfoID As Integer
	
	Private _SvcthatGetsCalledWCFSvcInfoID As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSvcthatCallsWCFSvcInfoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSvcthatCallsWCFSvcInfoIDChanged()
    End Sub
    Partial Private Sub OnSvcthatGetsCalledWCFSvcInfoIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnSvcthatGetsCalledWCFSvcInfoIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SvcthatCallsWCFSvcInfoID", DbType:="Int NOT NULL")>  _
	Public Property SvcthatCallsWCFSvcInfoID() As Integer
		Get
			Return Me._SvcthatCallsWCFSvcInfoID
		End Get
		Set
			If ((Me._SvcthatCallsWCFSvcInfoID = value)  _
						= false) Then
				Me.OnSvcthatCallsWCFSvcInfoIDChanging(value)
				Me.SendPropertyChanging
				Me._SvcthatCallsWCFSvcInfoID = value
				Me.SendPropertyChanged("SvcthatCallsWCFSvcInfoID")
				Me.OnSvcthatCallsWCFSvcInfoIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SvcthatGetsCalledWCFSvcInfoID", DbType:="Int NOT NULL")>  _
	Public Property SvcthatGetsCalledWCFSvcInfoID() As Integer
		Get
			Return Me._SvcthatGetsCalledWCFSvcInfoID
		End Get
		Set
			If ((Me._SvcthatGetsCalledWCFSvcInfoID = value)  _
						= false) Then
				Me.OnSvcthatGetsCalledWCFSvcInfoIDChanging(value)
				Me.SendPropertyChanging
				Me._SvcthatGetsCalledWCFSvcInfoID = value
				Me.SendPropertyChanged("SvcthatGetsCalledWCFSvcInfoID")
				Me.OnSvcthatGetsCalledWCFSvcInfoIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	
	Private _CustomerID As Integer
	
	Private _CustomerName As String
	
	Private _PrimaryServerID As Integer
	
	Private _CurrentAuthorizationID As Integer
	
	Private _PrimaryContactInfoID As Integer
	
	Private _CustomerSurveyMasterID As Integer
	
	Private _PrimaryDataStoreID As Integer
	
	Private _RDENTQueueURI_ID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me._CustomerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="VarChar(75) NOT NULL", CanBeNull:=false)>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryServerID", DbType:="Int NOT NULL")>  _
	Public Property PrimaryServerID() As Integer
		Get
			Return Me._PrimaryServerID
		End Get
		Set
			If ((Me._PrimaryServerID = value)  _
						= false) Then
				Me._PrimaryServerID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentAuthorizationID", DbType:="Int NOT NULL")>  _
	Public Property CurrentAuthorizationID() As Integer
		Get
			Return Me._CurrentAuthorizationID
		End Get
		Set
			If ((Me._CurrentAuthorizationID = value)  _
						= false) Then
				Me._CurrentAuthorizationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryContactInfoID", DbType:="Int NOT NULL")>  _
	Public Property PrimaryContactInfoID() As Integer
		Get
			Return Me._PrimaryContactInfoID
		End Get
		Set
			If ((Me._PrimaryContactInfoID = value)  _
						= false) Then
				Me._PrimaryContactInfoID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerSurveyMasterID", DbType:="Int NOT NULL")>  _
	Public Property CustomerSurveyMasterID() As Integer
		Get
			Return Me._CustomerSurveyMasterID
		End Get
		Set
			If ((Me._CustomerSurveyMasterID = value)  _
						= false) Then
				Me._CustomerSurveyMasterID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryDataStoreID", DbType:="Int NOT NULL")>  _
	Public Property PrimaryDataStoreID() As Integer
		Get
			Return Me._PrimaryDataStoreID
		End Get
		Set
			If ((Me._PrimaryDataStoreID = value)  _
						= false) Then
				Me._PrimaryDataStoreID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RDENTQueueURI_ID", DbType:="Int NOT NULL")>  _
	Public Property RDENTQueueURI_ID() As Integer
		Get
			Return Me._RDENTQueueURI_ID
		End Get
		Set
			If ((Me._RDENTQueueURI_ID = value)  _
						= false) Then
				Me._RDENTQueueURI_ID = value
			End If
		End Set
	End Property
End Class
